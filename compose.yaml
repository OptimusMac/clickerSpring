services:
  # Кафка и Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    networks:
      - app-network

  kafka-init:
    image: docker.io/bitnami/kafka:3
    networks:
      - app-network
    command: /create-topics.sh
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - TEST_TOPIC_NAME=test
    depends_on:
      kafka:
        condition: service_started
    volumes:
      - ./create-topics.sh:/create-topics.sh
    init: true

  # Cassandra
  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "9042:9042"
    volumes:
      - cassandra-data:/var/lib/cassandra
      - ./init-cassandra.cql:/docker-entrypoint-initdb.d/init-cassandra.cql
    environment:
      - CASSANDRA_CLUSTER_NAME=click_cluster
      - CASSANDRA_DC=datacenter1
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -u cassandra -p cassandra -f /docker-entrypoint-initdb.d/init-cassandra.cql && cqlsh -u cassandra -p cassandra -e 'describe keyspaces'" ]
      interval: 10s
      timeout: 10s
      retries: 20
    restart: always

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=7d'
    depends_on:
      - gateway-service
    networks:
      - app-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - app-network

  # Gateway Service
  gateway-service:
    build:
      context: ./gateway-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATA_CASSANDRA_CONTACT_POINTS=cassandra
      - SPRING_DATA_CASSANDRA_KEYSPACE=click_keyspace
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,metrics,prometheus
    depends_on:
      - kafka
      - cassandra
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Click Analytics Service (запускается последним)
  click-analytics:
    build:
      context: ./click-analytics
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATA_CASSANDRA_CONTACT_POINTS=cassandra
      - SPRING_DATA_CASSANDRA_KEYSPACE=click_keyspace
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,metrics,prometheus
    depends_on:
      cassandra:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  cassandra-data:
    driver: local
  grafana-storage:
    driver: local